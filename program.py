import os
import logging
import json
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import speech_recognition as sr
from pydub import AudioSegment
import tempfile
import requests
import aiohttp
import asyncio
from PyPDF2 import PdfReader
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–ø–æ–ª—É—á–∏—Ç–µ —É @BotFather)
BOT_TOKEN = "8358463402:AAHHxoPcuGbwD4JkSeBcW72vun2XATWNJkU"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ OpenRouter.ai
OPENROUTER_API_KEY = "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"
OPENROUTER_API_URL = "https://openrouter.ai/api/v1/chat/completions"
OPENROUTER_MODEL = "openai/gpt-3.5-turbo"

async def call_openrouter_api(prompt: str) -> str:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ OpenRouter API"""
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        "HTTP-Referer": "https://github.com/your-username/telegram-bot",
        "X-Title": "Telegram Transcription Bot"
    }
    
    payload = {
        "model": OPENROUTER_MODEL,
        "messages": [
            {
                "role": "system",
                "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —É–ª—É—á—à–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
            },
            {
                "role": "user",
                "content": prompt
            }
        ],
        "temperature": 0.7,
        "max_tokens": 1000
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                OPENROUTER_API_URL,
                headers=headers,
                json=payload,
                timeout=30
            ) as response:
                
                if response.status == 200:
                    data = await response.json()
                    return data['choices'][0]['message']['content'].strip()
                else:
                    error_text = await response.text()
                    logger.error(f"OpenRouter API error: {response.status} - {error_text}")
                    return f"–û—à–∏–±–∫–∞ API: {response.status}"
                    
    except asyncio.TimeoutError:
        logger.error("OpenRouter API timeout")
        return "–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API"
    except Exception as e:
        logger.error(f"OpenRouter API exception: {e}")
        return f"–û—à–∏–±–∫–∞: {str(e)}"

async def improve_text_with_ai(text: str, text_type: str = "general") -> str:
    """–£–ª—É—á—à–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é AI"""
    if len(text.strip()) < 10:
        return text
    
    if text_type == "audio":
        prompt = f"""
        –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞–±–æ—Ç–∞–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∏–∑ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏:
        
        1. –ò—Å–ø—Ä–∞–≤—å –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
        2. –î–æ–±–∞–≤—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        3. –°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–º –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
        4. –°–æ—Ö—Ä–∞–Ω–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–º—ã—Å–ª –∏ —Å—Ç–∏–ª—å
        5. –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ—Å–≤—è–∑–Ω—ã–π - –ø–æ–ø—Ä–æ–±—É–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏–∫—É
        
        –¢–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: "{text}"
        
        –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
        """
    else:
        prompt = f"""
        –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–ª—É—á—à–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç:
        
        1. –ò—Å–ø—Ä–∞–≤—å –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ, –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
        2. –£–ª—É—á—à–∏ —Å—Ç–∏–ª—å –∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
        3. –°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –±–æ–ª–µ–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ –ª–æ–≥–∏—á–Ω—ã–º
        4. –°–æ—Ö—Ä–∞–Ω–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–º—ã—Å–ª –∏ –æ—Å–Ω–æ–≤–Ω—É—é –∏–¥–µ—é
        5. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ - —Ä–∞–∑–±–µ–π –Ω–∞ –∞–±–∑–∞—Ü—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
        
        –¢–µ–∫—Å—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è: "{text}"
        
        –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
        """
    
    return await call_openrouter_api(prompt)

async def summarize_text_with_ai(text: str) -> str:
    """–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é AI"""
    if len(text.split()) < 20:
        return "–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"
    
    prompt = f"""
    –°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞. –í—ã–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–¥–µ–∏ –∏ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã.
    –í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
    
    –¢–µ–∫—Å—Ç: "{text}"
    """
    
    return await call_openrouter_api(prompt)

async def process_pdf_with_ai(text: str) -> str:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é AI"""
    if len(text.strip()) < 50:
        return "–¢–µ–∫—Å—Ç –∏–∑ PDF —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"
    
    prompt = f"""
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç, –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∏–∑ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞:
    
    1. –°–¥–µ–ª–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
    2. –í—ã–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –∏ —Ç–µ–º—ã
    3. –ü—Ä–µ–¥—Å—Ç–∞–≤—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    4. –°–æ—Ö—Ä–∞–Ω–∏ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã
    
    –¢–µ–∫—Å—Ç –∏–∑ PDF: "{text[:3000]}"  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è API
    
    –í–µ—Ä–Ω–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
    """
    
    return await call_openrouter_api(prompt)

async def correct_text_with_ai(text: str) -> str:
    """–ö–æ—Ä—Ä–µ–∫—Ç—É—Ä–∞ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é AI"""
    if len(text.strip()) < 10:
        return text
    
    prompt = f"""
    –ü—Ä–æ–≤–µ–¥–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∫–æ—Ä—Ä–µ–∫—Ç—É—Ä—É —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞:
    
    1. –ò—Å–ø—Ä–∞–≤—å –≤—Å–µ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
    2. –ò—Å–ø—Ä–∞–≤—å –ø—É–Ω–∫—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ (–∑–∞–ø—è—Ç—ã–µ, —Ç–æ—á–∫–∏, —Ç–∏—Ä–µ –∏ —Ç.–¥.)
    3. –ü—Ä–æ–≤–µ—Ä—å –≥—Ä–∞–º–º–∞—Ç–∏–∫—É –∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
    4. –£–±–µ—Ä–∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞ –∏ —Ñ—Ä–∞–∑—ã
    5. –°–æ—Ö—Ä–∞–Ω–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–º—ã—Å–ª –∏ —Å—Ç–∏–ª—å
    
    –¢–µ–∫—Å—Ç –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç—É—Ä—ã: "{text}"
    
    –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
    """
    
    return await call_openrouter_api(prompt)

async def format_text_with_ai(text: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é AI"""
    if len(text.strip()) < 10:
        return text
    
    prompt = f"""
    –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏:
    
    1. –†–∞–∑–±–µ–π –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∞–±–∑–∞—Ü—ã
    2. –î–æ–±–∞–≤—å –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏ –≥–¥–µ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ
    3. –ò—Å–ø—Ä–∞–≤—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    4. –°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –±–æ–ª–µ–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º
    5. –°–æ—Ö—Ä–∞–Ω–∏ –≤—Å–µ –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∏ —Å–º—ã—Å–ª
    
    –¢–µ–∫—Å—Ç –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: "{text}"
    
    –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
    """
    
    return await call_openrouter_api(prompt)

def download_file(file_url, file_path):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
    response = requests.get(file_url)
    with open(file_path, 'wb') as f:
        f.write(response.content)

def convert_audio(input_path, output_path):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ –≤ WAV —Ñ–æ—Ä–º–∞—Ç"""
    try:
        audio = AudioSegment.from_file(input_path)
        audio = audio.set_frame_rate(16000).set_channels(1)
        audio.export(output_path, format="wav")
        return True
    except Exception as e:
        logger.error(f"Audio conversion error: {e}")
        return False

def transcribe_audio(audio_path):
    """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é SpeechRecognition"""
    recognizer = sr.Recognizer()
    
    try:
        with sr.AudioFile(audio_path) as source:
            audio_data = recognizer.record(source)
        
        text = recognizer.recognize_google(audio_data, language='ru-RU')
        return text
    except sr.UnknownValueError:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å"
    except sr.RequestError as e:
        return f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {e}"

def extract_text_from_pdf(pdf_path):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF —Ñ–∞–π–ª–∞"""
    try:
        with open(pdf_path, 'rb') as file:
            pdf_reader = PdfReader(file)
            text = ""
            
            for page_num in range(len(pdf_reader.pages)):
                page = pdf_reader.pages[page_num]
                text += page.extract_text() + "\n\n"
            
            return text.strip()
    except Exception as e:
        logger.error(f"PDF extraction error: {e}")
        return f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è PDF: {e}"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = (
        "üéôÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞!\n\n"
        "üìÅ –ß—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Üí —Ç–µ–∫—Å—Ç —Å —É–ª—É—á—à–µ–Ω–∏–µ–º\n"
        "‚Ä¢ –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã ‚Üí —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ç—É—Ä–∞\n"
        "‚Ä¢ PDF —Ñ–∞–π–ª—ã ‚Üí –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è\n"
        "‚Ä¢ –õ—é–±–æ–π —Ç–µ–∫—Å—Ç ‚Üí —É–ª—É—á—à–µ–Ω–∏–µ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n"
        "‚ú® –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç, –∏ —è –µ–≥–æ —É–ª—É—á—à—É!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/help - –ø–æ–º–æ—â—å\n"
        "/improve - —É–ª—É—á—à–∏—Ç—å —Ç–µ–∫—Å—Ç (–æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)"
    )
    await update.message.reply_text(welcome_text)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "ü§ñ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n\n"
        "üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ ‚Üí –ø–æ–ª—É—á–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å AI-–æ–±—Ä–∞–±–æ—Ç–∫–æ–π\n\n"
        "üìÅ –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã:\n"
        "‚Ä¢ MP3, WAV, OGG ‚Üí —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å —É–ª—É—á—à–µ–Ω–∏–µ–º\n\n"
        "üìÑ PDF —Ñ–∞–π–ª—ã:\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF ‚Üí –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Å AI\n\n"
        "üìù –õ—é–±–æ–π —Ç–µ–∫—Å—Ç:\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç ‚Üí —É–ª—É—á—à–µ–Ω–∏–µ, –∫–æ—Ä—Ä–µ–∫—Ç—É—Ä–∞, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
        "‚Ä¢ –û—Ç–≤–µ—Ç—å—Ç–µ /improve –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º\n\n"
        "‚öôÔ∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 20MB\n"
        "‚è±Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: 5 –º–∏–Ω—É—Ç\n\n"
        "üß† –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ AI-–º–æ–¥–µ–ª–∏: GPT-3.5 Turbo —á–µ—Ä–µ–∑ OpenRouter"
    )
    await update.message.reply_text(help_text)

async def improve_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /improve"""
    if not update.message.reply_to_message:
        await update.message.reply_text("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /improve –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å")
        return
    
    original_message = update.message.reply_to_message
    text_to_improve = ""
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
    if original_message.text:
        text_to_improve = original_message.text
    elif original_message.caption:
        text_to_improve = original_message.caption
    else:
        await update.message.reply_text("‚ùå –í –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è")
        return
    
    if len(text_to_improve.strip()) < 5:
        await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è")
        return
    
    await update.message.reply_text("‚ú® –£–ª—É—á—à–∞—é —Ç–µ–∫—Å—Ç...")
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —É–ª—É—á—à–µ–Ω–∏—è
    keyboard = [
        [{"text": "üîÑ –ë–∞–ª–∞–Ω—Å", "callback_data": f"improve:balance:{text_to_improve[:500]}"}],
        [{"text": "üéØ –ö–æ—Ä—Ä–µ–∫—Ç—É—Ä–∞", "callback_data": f"improve:correct:{text_to_improve[:500]}"}],
        [{"text": "üìã –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "callback_data": f"improve:format:{text_to_improve[:500]}"}]
    ]
    reply_markup = {"inline_keyboard": keyboard}
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–ª—É—á—à–µ–Ω–∏—è:",
        reply_markup=json.dumps(reply_markup)
    )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    if text.startswith('/'):
        return
    
    if len(text.strip()) < 10:
        await update.message.reply_text("üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /improve")
        return
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —É–ª—É—á—à–∏—Ç—å —Ç–µ–∫—Å—Ç
    keyboard = [
        [{"text": "‚ú® –£–ª—É—á—à–∏—Ç—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç", "callback_data": f"improve:balance:{text[:500]}"}]
    ]
    reply_markup = {"inline_keyboard": keyboard}
    
    await update.message.reply_text(
        "–•–æ—Ç–∏—Ç–µ —É–ª—É—á—à–∏—Ç—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é AI?",
        reply_markup=json.dumps(reply_markup)
    )

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        await update.message.reply_text("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        voice = update.message.voice
        file = await voice.get_file()
        
        with tempfile.NamedTemporaryFile(delete=False, suffix='.ogg') as temp_ogg:
            temp_ogg_path = temp_ogg.name
        
        with tempfile.NamedTemporaryFile(delete=False, suffix='.wav') as temp_wav:
            temp_wav_path = temp_wav.name
        
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        download_file(file.file_path, temp_ogg_path)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ WAV
        if not convert_audio(temp_ogg_path, temp_wav_path):
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ")
            return
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è
        raw_text = transcribe_audio(temp_wav_path)
        
        if "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å" in raw_text or "–û—à–∏–±–∫–∞" in raw_text:
            await update.message.reply_text(f"‚ùå {raw_text}")
            return
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—ã—Ä–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        await update.message.reply_text(f"üìù –°—ã—Ä–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:\n\n{raw_text}")
        
        # –£–ª—É—á—à–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é AI
        await update.message.reply_text("üß† –£–ª—É—á—à–∞—é —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é AI...")
        improved_text = await improve_text_with_ai(raw_text, "audio")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        if improved_text.startswith("–û—à–∏–±–∫–∞"):
            await update.message.reply_text(f"‚ùå {improved_text}")
        else:
            if len(improved_text) > 4000:
                for i in range(0, len(improved_text), 4000):
                    await update.message.reply_text(f"‚ú® –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (—á–∞—Å—Ç—å {i//4000 + 1}):\n\n{improved_text[i:i+4000]}")
            else:
                await update.message.reply_text(f"‚ú® –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n{improved_text}")
        
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        os.unlink(temp_ogg_path)
        os.unlink(temp_wav_path)
        
    except Exception as e:
        logger.error(f"Error processing voice: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ")

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (PDF)"""
    try:
        document = update.message.document
        file_name = document.file_name or "file"
        file_extension = os.path.splitext(file_name)[1].lower()
        
        if file_extension != '.pdf':
            await update.message.reply_text("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ PDF —Ñ–∞–π–ª—ã")
            return
        
        await update.message.reply_text("üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é PDF —Ñ–∞–π–ª...")
        
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        file = await document.get_file()
        with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as temp_pdf:
            temp_pdf_path = temp_pdf.name
        
        download_file(file.file_path, temp_pdf_path)
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF
        extracted_text = extract_text_from_pdf(temp_pdf_path)
        
        if extracted_text.startswith("–û—à–∏–±–∫–∞"):
            await update.message.reply_text(f"‚ùå {extracted_text}")
            return
        
        if not extracted_text.strip():
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ PDF —Ñ–∞–π–ª–∞")
            return
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–ø–µ—Ä–≤—ã–µ 2000 —Å–∏–º–≤–æ–ª–æ–≤)
        preview_text = extracted_text[:2000] + ("..." if len(extracted_text) > 2000 else "")
        await update.message.reply_text(f"üìñ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (—Ñ—Ä–∞–≥–º–µ–Ω—Ç):\n\n{preview_text}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å –ø–æ–º–æ—â—å—é AI
        await update.message.reply_text("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é AI...")
        analyzed_text = await process_pdf_with_ai(extracted_text)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
        if analyzed_text.startswith("–û—à–∏–±–∫–∞"):
            await update.message.reply_text(f"‚ùå {analyzed_text}")
        else:
            await update.message.reply_text(f"üìä –ê–Ω–∞–ª–∏–∑ PDF:\n\n{analyzed_text}")
        
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        os.unlink(temp_pdf_path)
        
    except Exception as e:
        logger.error(f"Error processing PDF: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF —Ñ–∞–π–ª–∞")

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith('improve:'):
        parts = query.data.split(':', 2)
        if len(parts) == 3:
            improve_type = parts[1]
            text_to_improve = parts[2]
            
            await query.edit_message_text("‚ú® –£–ª—É—á—à–∞—é —Ç–µ–∫—Å—Ç...")
            
            if improve_type == "balance":
                result = await improve_text_with_ai(text_to_improve, "general")
            elif improve_type == "correct":
                result = await correct_text_with_ai(text_to_improve)
            elif improve_type == "format":
                result = await format_text_with_ai(text_to_improve)
            else:
                result = await improve_text_with_ai(text_to_improve, "general")
            
            if result.startswith("–û—à–∏–±–∫–∞"):
                await query.message.reply_text(f"‚ùå {result}")
            else:
                await query.message.reply_text(f"‚ú® –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n{result}")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Update {update} caused error {context.error}")
    if update and update.message:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("improve", improve_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_handler(MessageHandler(filters.VOICE, handle_voice))
    application.add_handler(MessageHandler(filters.AUDIO, handle_voice))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
    from telegram.ext import CallbackQueryHandler
    application.add_handler(CallbackQueryHandler(handle_callback_query))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("ü§ñ AI –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    print("üìÅ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: —Ç–µ–∫—Å—Ç, –≥–æ–ª–æ—Å–æ–≤—ã–µ, –∞—É–¥–∏–æ, PDF")
    application.run_polling()

if __name__ == "__main__":
    main()